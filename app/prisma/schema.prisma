// prisma/schema.prisma
datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PackingList {
  id        Int      @id @default(autoincrement())
  userId    String   // ユーザーIDを保存
  gearId    Int
  gear      Gear     @relation(fields: [gearId], references: [id])
  createdAt DateTime @default(now())
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  gears Gear[]
}

model Brand {
  id    Int    @id @default(autoincrement())
  name  String @unique
  gears Gear[]
}

model Gear {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  brandId     Int
  brand       Brand    @relation(fields: [brandId], references: [id])
  img         String
  price       Int?
  productUrl  String?
  weight      Int
  reviews     Review[]
  packingLists PackingList[]
  avgRating   Float?   @default(0)
  reviewCount Int      @default(0)
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  gearId    Int
  gear      Gear     @relation(fields: [gearId], references: [id])
  createdAt DateTime @default(now())
}

model CacheEntry {
  key       String   @id
  value     String   @db.Text
  expiresAt DateTime
}
